
% there is also op_{+,-,*./}

'op_<'(X, Y) := '$__builtin_term_compare_<'(X, Y).
%'op_=='(X, Y) := '__builtin_term_compare_=='(X, Y).

'op_<'(&$with_key(Key1, Value1), &$with_key(Key2, Value2)) := Value1 < Value2.

% this should get applied to values which invoke calls to arg, but those might not return the arg (if not present amoung all branches)
$value(X) := X.
$value(&$with_key(Key, Value)) := Value.

$arg(&$with_key(Key, Value)) = Key.  % this needs to get attached to the key value case

arg(Value, Argument) = &$with_key(Argument, Value).

% builtin types representing the primitive values

% can be used as `[1,2,3] : list(&int)` to make a type of integer list`
list(Type, []).
list(Type, [X|Xs]) :- $call(Type, X), list(Type, Xs).

list_length(0, []).
list_length(L+1, [X|Xs]) :- list_length(L, Xs), L >= 0.

append([], A, A).
append([X|Y], A, [X|B]) :- append(Y, A, B).

% this might be better represented as an R-expr where it can identify if the return value is true and then can eleminate
% Otherwise we can not use X to perform any looping if requested.
'?'(X) := false.
'?'(X) := true for _ is $call(X).

in_list([X|_], X).
in_list([_|Xs], X) :- in_list(Xs, X).

sign(X) = 1 for X > 0.
sign(0) = 0.
sign(X) = -1 for X < 0.

% priority for the agenda
'$priority'(X) := 0.
